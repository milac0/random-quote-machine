{"version":3,"sources":["Quote.js","Author.js","Twitter.js","Tumblr.js","NewQuote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","react_default","a","createElement","id","quote","Author","author","Twitter","href","concat","Tumblr","NewQuote","onClick","handleClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messages","output","bind","assertThisInitialized","_this2","random","Math","floor","length","setState","filter","elem","src_Quote","src_Author","src_Twitter","src_Tumblr","src_NewQuote","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAUeA,EARF,SAACC,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACRH,EAAAC,EAAAC,cAAA,cAAMH,EAAMK,SCKLC,EARD,SAACN,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACJH,EAAAC,EAAAC,cAAA,cAAMH,EAAMO,UCKTC,EARC,SAACR,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACNH,EAAAC,EAAAC,cAAA,KAAGM,KAAI,0CAAAC,OAA4CV,EAAMK,MAAlD,MAAAK,OAA4DV,EAAMO,SAAzE,aCKKI,EARA,WACX,OACIV,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACRH,EAAAC,EAAAC,cAAA,KAAGM,KAAK,kCAAR,YCUOG,EAbC,SAACZ,GACb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACAC,GAAG,YACHS,QAASb,EAAMc,aAFf,eCoDGC,qBA/Cb,SAAAA,EAAYf,GAAM,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnB,KACDuB,MAAQ,CACXC,SAAU,CACR,CAACnB,MAAO,4BAA6BE,OAAQ,aAC7C,CAACF,MAAO,kBAAmBE,OAAQ,eACnC,CAACF,MAAO,qCAAsCE,OAAQ,YACtD,CAACF,MAAO,mBAAoBE,OAAQ,QACpC,CAACF,MAAO,gBAAiBE,OAAQ,OACjC,CAACF,MAAO,8CAAgDE,OAAQ,YAChE,CAACF,MAAO,mBAAoBE,OAAQ,aAEtCkB,OAAQ,IAEVT,EAAKF,YAAcE,EAAKF,YAAYY,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IAdHA,mFAiBhBG,KAAKL,oDAGQ,IAAAc,EAAAT,KACPU,EAASC,KAAKC,MAAMD,KAAKD,SAASV,KAAKI,MAAMC,SAASQ,QAC5Db,KAAKc,SAAW,iBAAO,CACrBR,OAAQG,EAAKL,MAAMC,SAASK,GAC5BL,SAAUI,EAAKL,MAAMC,SAASU,OAAO,SAACC,GAAD,OAAUA,IAASP,EAAKL,MAAMC,SAASK,yCAKhF,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAACiC,EAAD,CAAO/B,MAAOc,KAAKI,MAAME,OAAOpB,QAChCJ,EAAAC,EAAAC,cAACkC,EAAD,CAAQ9B,OAAQY,KAAKI,MAAME,OAAOlB,SAClCN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACRH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACRH,EAAAC,EAAAC,cAACmC,EAAD,CACAjC,MAAOc,KAAKI,MAAME,OAAOpB,MACzBE,OAAQY,KAAKI,MAAME,OAAOlB,SAE1BN,EAAAC,EAAAC,cAACoC,EAAD,OAEAtC,EAAAC,EAAAC,cAACqC,EAAD,CAAU1B,YAAaK,KAAKL,uBA1ChB2B,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.53937e21.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Quote =(props) =>{\r\n    return (\r\n        <div id=\"text\">\r\n        <h1>\"{props.quote}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Quote;","import React from 'react';\r\n\r\nconst Author =(props) =>{\r\n    return (\r\n        <div id=\"author\">\r\n            <h3>-{props.author}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Author;","import React from 'react';\r\n\r\nconst Twitter = (props) =>{\r\n    return (\r\n        <div id=\"tweet-quote\">\r\n          <a href={`https://twitter.com/intent/tweet?text=\"${props.quote}\" ${props.author}`}>twitter</a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Twitter;","import React from 'react';\r\n\r\nconst Tumblr = () =>{\r\n    return (\r\n        <div id=\"tumblr-quote\">\r\n        <a href=\"https://embed.tumblr.com/share\">tumblr</a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tumblr;","import React from 'react';\r\n\r\nconst NewQuote =(props) =>{\r\n    return (\r\n        <div>\r\n            <button  \r\n            id=\"new-quote\"\r\n            onClick={props.handleClick}\r\n            >\r\n            New quote\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewQuote;","import React from 'react';\nimport Quote from './Quote';\nimport Author from './Author';\nimport Twitter from './Twitter';\nimport Tumblr from './Tumblr';\nimport NewQuote from './NewQuote';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      messages: [\n        {quote: 'Bolje zivim nego ministar', author: 'Pejakovic'},\n        {quote: 'Ja sam najbolji', author: 'Ibrahimovic'},\n        {quote: 'Bolje vrabac u ruci nego na grani.', author: 'Profesor'},\n        {quote: 'Kuglu sladoleda?', author: 'Medo'},\n        {quote: 'You can do it', author: 'FCC'},\n        {quote: 'I could\\'ve record it again withou mistaking', author: 'A. Meads'},\n        {quote: 'Sve je relativno', author: 'Ainstein'}\n      ],\n      output: {}\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount () {\n    this.handleClick();\n  };\n\n  handleClick () {\n    const random = Math.floor(Math.random()*this.state.messages.length);\n    this.setState ( () => ({\n      output: this.state.messages[random],\n      messages: this.state.messages.filter((elem) => elem !== this.state.messages[random])\n    }))\n  };\n\n  render(){\n  return (\n    <div id=\"quote-box\">\n      <Quote quote={this.state.output.quote}/>\n      <Author author={this.state.output.author}/>\n      <div id=\"buttons\">\n      <div id=\"social\">\n      <Twitter\n      quote={this.state.output.quote}\n      author={this.state.output.author}\n       />\n      <Tumblr />\n      </div>\n      <NewQuote handleClick={this.handleClick}/>\n      </div>\n    </div>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}